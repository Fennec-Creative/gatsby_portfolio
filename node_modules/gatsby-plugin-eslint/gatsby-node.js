"use strict";

var _excluded = ["stages", "extensions", "exclude", "plugins"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ESLintPlugin = require("eslint-webpack-plugin");

var webpackMerge = require("webpack-merge");

var mergeWithCustomize = webpackMerge.mergeWithCustomize,
    unique = webpackMerge.unique;

exports.onCreateWebpackConfig = function (_ref, _ref2) {
  var stage = _ref.stage,
      actions = _ref.actions,
      getConfig = _ref.getConfig;

  var stages = _ref2.stages,
      extensions = _ref2.extensions,
      exclude = _ref2.exclude,
      plugins = _ref2.plugins,
      remainingOptions = _objectWithoutProperties(_ref2, _excluded);

  var pluginStages = stages || ["develop"];
  var options = {};
  options.extensions = extensions ? extensions : ["js", "jsx", "ts", "tsx"];
  options.exclude = exclude ? exclude : ["node_modules", "bower_components", ".cache", "public"];

  if (pluginStages.includes(stage)) {
    var esLintPluginOptions = _objectSpread(_objectSpread({}, options), remainingOptions);

    var lintConfig = {
      plugins: [new ESLintPlugin(esLintPluginOptions)]
    };
    var currentConfig = getConfig();
    var newConfig = mergeWithCustomize({
      customizeArray: unique("plugins", ["ESLintWebpackPlugin"], function (plugin) {
        return plugin.constructor && plugin.constructor.name;
      })
    })(currentConfig, lintConfig);
    actions.replaceWebpackConfig(newConfig);
  }
};